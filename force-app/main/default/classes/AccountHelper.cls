/*
AccountHelper Overview

The `AccountHelper` class is designed to provide helper methods that assist in performing specific operations on Account records. 
This class is intended to modularize the logic used in the `AccountTrigger` to ensure separation of concerns, improve readability, and ease maintenance. 

This class is currently stubbed out. As part of this exercise, you are expected to:
1. Implement the method bodies to carry out the specified operations on Account records.
2. Refactor the `AccountTrigger` to utilize the methods provided in this `AccountHelper` class.

Methods:
- `setTypeProspect(SObject objects)`: 
    - Purpose: Update the 'Type' field of the given Account record to 'Prospect' if it's not already set.
    - Note: You'll likely need to adjust the method signature to accept the necessary parameters.

- `addressCopy()`: 
    - Purpose: Copy the shipping address of the Account to its billing address. 
    - Note: You'll likely need to adjust the method signature to accept the necessary parameters.

- `setRating`: 
    - Purpose: Evaluate certain conditions on the Account and assign a rating based on that evaluation. You'll need to define the method's signature and implement its logic.

- `defaultContact`: 
    - Purpose: Create a default contact related to the Account after the Account is inserted. You'll need to define the method's signature and implement its logic.

Remember:
Always ensure that your helper methods are bulk-safe to handle multiple records efficiently. 
*/
public with sharing class AccountHelper {
    
    public static void setTypeProspect(List<Account> accs){
        for (Account acc : accs) {
            if (acc.Type == null) {
                acc.Type = 'Prospect';
            }
        }
    }

    public static void addressCopy(List<Account> accs){
        for (Account acc : accs) {
            if (String.isNotBlank(acc.ShippingStreet)) {
                acc.BillingStreet = acc.ShippingStreet;
                acc.BillingCity = acc.ShippingCity;
                acc.BillingState = acc.ShippingState;
                acc.BillingPostalCode = acc.ShippingPostalCode;
                acc.BillingCountry = acc.ShippingCountry;
            }

        }
    }

    //[public | private ] [static] data_type setRating (input parameters) {
    public static void setRating (List<Account> accs) {
        //  The body of the method
        for (Account acc : accs) {
            if (String.isNotBlank(String.valueOf(acc.Phone)) && String.isNotBlank(acc.Website) && String.isNotBlank(acc.Fax)) {
                acc.Rating = 'Hot';
            }
        }
    }
 

    //[public | private ] [static] data_type defaultContact (input parameters) {
    public static void defaultContact (List<Account> accs) {
        //  The body of the method
        List<Contact> conToInsert = new List<Contact>();
        for (Account acc : accs) {
            Contact con = new Contact();
            con.LastName = 'DefaultContact';
            con.Email = 'default@email.com';
            con.AccountId = acc.Id;
            conToInsert.add(con);
        }
        Database.DMLOptions dmo = new Database.DMLOptions();
        dmo.DuplicateRuleHeader.AllowSave = true;
        dmo.DuplicateRuleHeader.RunAsCurrentUser = false;
        Database.insert(conToInsert, dmo, AccessLevel.SYSTEM_MODE);
    }

    //}
}
